// <auto-generated />
using System;
using HouseCleanersApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HouseCleanersApi.Migrations
{
    [DbContext(typeof(clearnersDbContext))]
    [Migration("20200721134743_UpdateStatusTable")]
    partial class UpdateStatusTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HouseCleanersApi.Data.Categorie", b =>
                {
                    b.Property<int>("categoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("categoryDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("categoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("categoryId");

                    b.HasIndex("categoryName")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("HouseCleanersApi.Data.Customer", b =>
                {
                    b.Property<int>("customerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("geoCoords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("plotNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("postCode")
                        .HasColumnType("int");

                    b.Property<string>("streetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("customerId");

                    b.HasIndex("userId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("HouseCleanersApi.Data.Disponibility", b =>
                {
                    b.Property<int>("disponibilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndHour")
                        .HasColumnType("datetime2");

                    b.Property<int>("professionalId")
                        .HasColumnType("int");

                    b.Property<bool>("reserved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("startHour")
                        .HasColumnType("datetime2");

                    b.HasKey("disponibilityId");

                    b.HasIndex("professionalId", "startHour", "EndHour")
                        .IsUnique();

                    b.ToTable("Disponibilities");
                });

            modelBuilder.Entity("HouseCleanersApi.Data.Invoice", b =>
                {
                    b.Property<int>("invoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("customerId")
                        .HasColumnType("int");

                    b.Property<decimal>("invoiceAmountTotal")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("invoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("professionalId")
                        .HasColumnType("int");

                    b.HasKey("invoiceId");

                    b.HasIndex("customerId");

                    b.HasIndex("professionalId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("HouseCleanersApi.Data.InvoiceLine", b =>
                {
                    b.Property<int>("invoicelineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("amount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("hourCount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("hourPrice")
                        .HasColumnType("numeric");

                    b.Property<int?>("invoiceId")
                        .HasColumnType("int");

                    b.Property<int?>("reservationId")
                        .HasColumnType("int");

                    b.HasKey("invoicelineId");

                    b.HasIndex("invoiceId");

                    b.HasIndex("reservationId");

                    b.ToTable("InvoiceLines");
                });

            modelBuilder.Entity("HouseCleanersApi.Data.Planning", b =>
                {
                    b.Property<int>("planingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan>("endBreakTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("endHour")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("planingDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("professionalId")
                        .HasColumnType("int");

                    b.Property<bool>("saterday")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("startBreakTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("startHour")
                        .HasColumnType("datetime2");

                    b.Property<bool>("sunday")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("timeSlot")
                        .HasColumnType("time");

                    b.HasKey("planingId");

                    b.HasIndex("professionalId");

                    b.ToTable("Plannings");
                });

            modelBuilder.Entity("HouseCleanersApi.Data.Professional", b =>
                {
                    b.Property<int>("professionalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("geoCoords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("plotNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("postCode")
                        .HasColumnType("int");

                    b.Property<string>("streetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("professionalId");

                    b.HasIndex("userId");

                    b.ToTable("Professionals");
                });

            modelBuilder.Entity("HouseCleanersApi.Data.ProfessionalService", b =>
                {
                    b.Property<int>("professionalId")
                        .HasColumnType("int");

                    b.Property<int>("serviceId")
                        .HasColumnType("int");

                    b.HasKey("professionalId", "serviceId");

                    b.HasIndex("serviceId");

                    b.ToTable("ProfessionalServices");
                });

            modelBuilder.Entity("HouseCleanersApi.Data.Reservation", b =>
                {
                    b.Property<int>("reservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ServiceId")
                        .HasColumnName("ServiceId")
                        .HasColumnType("int");

                    b.Property<int?>("customerId")
                        .HasColumnType("int");

                    b.Property<int>("disponibilityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("endHour")
                        .HasColumnType("datetime2");

                    b.Property<int?>("professionalId")
                        .HasColumnType("int");

                    b.Property<DateTime>("reservationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("startHour")
                        .HasColumnType("datetime2");

                    b.Property<int?>("statusId")
                        .HasColumnType("int");

                    b.HasKey("reservationId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("customerId");

                    b.HasIndex("disponibilityId");

                    b.HasIndex("professionalId");

                    b.HasIndex("statusId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("HouseCleanersApi.Data.Service", b =>
                {
                    b.Property<int>("serviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("categoryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.Property<int?>("professionalId")
                        .HasColumnType("int");

                    b.Property<string>("serviceDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("serviceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("serviceId");

                    b.HasIndex("categoryId");

                    b.HasIndex("professionalId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("HouseCleanersApi.Data.Status", b =>
                {
                    b.Property<int>("statusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("statusDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("statusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("statusId");

                    b.HasAlternateKey("statusName")
                        .HasName("U.status");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("HouseCleanersApi.Data.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("firstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("HouseCleanersApi.Data.Customer", b =>
                {
                    b.HasOne("HouseCleanersApi.Data.User", "user")
                        .WithMany()
                        .HasForeignKey("userId");
                });

            modelBuilder.Entity("HouseCleanersApi.Data.Disponibility", b =>
                {
                    b.HasOne("HouseCleanersApi.Data.Professional", "professional")
                        .WithMany("disponibilities")
                        .HasForeignKey("professionalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("HouseCleanersApi.Data.Invoice", b =>
                {
                    b.HasOne("HouseCleanersApi.Data.Customer", "customer")
                        .WithMany("Invoices")
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HouseCleanersApi.Data.Professional", null)
                        .WithMany("invoices")
                        .HasForeignKey("professionalId");
                });

            modelBuilder.Entity("HouseCleanersApi.Data.InvoiceLine", b =>
                {
                    b.HasOne("HouseCleanersApi.Data.Invoice", "invoice")
                        .WithMany("invoiceLines")
                        .HasForeignKey("invoiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HouseCleanersApi.Data.Reservation", "reservation")
                        .WithMany("invoiceLines")
                        .HasForeignKey("reservationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HouseCleanersApi.Data.Planning", b =>
                {
                    b.HasOne("HouseCleanersApi.Data.Professional", "professionnal")
                        .WithMany("plannings")
                        .HasForeignKey("professionalId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HouseCleanersApi.Data.Professional", b =>
                {
                    b.HasOne("HouseCleanersApi.Data.User", "user")
                        .WithMany()
                        .HasForeignKey("userId");
                });

            modelBuilder.Entity("HouseCleanersApi.Data.ProfessionalService", b =>
                {
                    b.HasOne("HouseCleanersApi.Data.Professional", "professional")
                        .WithMany()
                        .HasForeignKey("professionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HouseCleanersApi.Data.Service", "service")
                        .WithMany("professionals")
                        .HasForeignKey("serviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HouseCleanersApi.Data.Reservation", b =>
                {
                    b.HasOne("HouseCleanersApi.Data.Service", "Service")
                        .WithMany("reservations")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HouseCleanersApi.Data.Customer", "customer")
                        .WithMany("Reservations")
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HouseCleanersApi.Data.Disponibility", "disponibility")
                        .WithMany()
                        .HasForeignKey("disponibilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HouseCleanersApi.Data.Professional", "professional")
                        .WithMany("reservations")
                        .HasForeignKey("professionalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HouseCleanersApi.Data.Status", "status")
                        .WithMany("reservations")
                        .HasForeignKey("statusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HouseCleanersApi.Data.Service", b =>
                {
                    b.HasOne("HouseCleanersApi.Data.Categorie", "category")
                        .WithMany("services")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HouseCleanersApi.Data.Professional", null)
                        .WithMany("services")
                        .HasForeignKey("professionalId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HouseCleanersApi.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HouseCleanersApi.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HouseCleanersApi.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HouseCleanersApi.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
